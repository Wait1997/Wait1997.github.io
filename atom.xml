<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-19T06:42:42.481Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node中app.use中间件</title>
    <link href="http://yoursite.com/2020/01/13/Node%E4%B8%ADapp.use%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/01/13/Node%E4%B8%ADapp.use%E4%B8%AD%E9%97%B4%E4%BB%B6/</id>
    <published>2020-01-13T08:00:19.963Z</published>
    <updated>2019-10-19T06:42:42.481Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Express中路由和中间件"><a href="#1-Express中路由和中间件" class="headerlink" title="1. Express中路由和中间件"></a>1. Express中路由和中间件</h3><h6 id="路由：就是如何处理HTTP请求中的路径部分"><a href="#路由：就是如何处理HTTP请求中的路径部分" class="headerlink" title="路由：就是如何处理HTTP请求中的路径部分"></a>路由：就是如何处理HTTP请求中的路径部分</h6><h6 id="中间件：就是在收到请求后和发送响应之前这个阶段执行的一些函数"><a href="#中间件：就是在收到请求后和发送响应之前这个阶段执行的一些函数" class="headerlink" title="中间件：就是在收到请求后和发送响应之前这个阶段执行的一些函数"></a>中间件：就是在收到请求后和发送响应之前这个阶段执行的一些函数</h6><h5 id="1-1-应用及中间件"><a href="#1-1-应用及中间件" class="headerlink" title="1.1 应用及中间件"></a>1.1 应用及中间件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next方法的作用就是将请求传递到下一个中间件</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  当请求进来，会从第一个中间件开始进行匹配</span></span><br><span class="line"><span class="comment">     如果匹配，则进来</span></span><br><span class="line"><span class="comment">     如果请求进入中间件之后，没有调用 next 则代码会停在当前中间件</span></span><br><span class="line"><span class="comment">     如果调用了 next 则继续向后找到第一个匹配的中间件</span></span><br><span class="line"><span class="comment">     如果不匹配，则继续判断匹配下一个中间件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 不关心请求路径的请求</span></span><br><span class="line"><span class="comment">// 不管以什么路径请求只要有next()传递</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1'</span>) <span class="comment">// 1</span></span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2'</span>)  <span class="comment">// 2</span></span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line">app.use(<span class="function">(<span class="params">req,res.next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'3'</span>)  <span class="comment">// 3</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关心请求路径的请求</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1'</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/b'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'b'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以 /a 开头的路径中间件</span></span><br><span class="line">app.use(<span class="string">'/a'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'a'</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当在浏览器中以 /a 开头的请求时，会输出 1 a 2</span></span><br><span class="line"><span class="comment">// 当在浏览器中以 /b 开头的请求时，会输出 1 b,这里不会输出 2 因为当请求/b开头的请求后没有next()方法传递就会停留在那个请求中</span></span><br></pre></td></tr></table></figure><h5 id="1-2-错误处理中间件"><a href="#1-2-错误处理中间件" class="headerlink" title="1.2 错误处理中间件"></a>1.2 错误处理中间件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">'/user'</span>,(req,res,next) =&gt; &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(has error)</span><br><span class="line">       next()</span><br><span class="line">   &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'error'</span>)</span><br><span class="line">       next(err)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 全局错误处理中间件</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err,req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err.stack)</span><br><span class="line">    res.status(<span class="number">500</span>).send(<span class="string">'error message'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/a'</span>,(req,res,next) =&gt; &#123;</span><br><span class="line">  fs.readFile(path.join(__dirname,<span class="string">'./datas.txt'</span>),<span class="string">'utf8'</span>,(err,data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> next(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    next()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/a'</span>, (req,res,next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'/a'</span>)</span><br><span class="line">  res.send(<span class="string">'/a'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当不匹配任何请求路径时 会进去此错误处理</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">'404 not Found'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局错误处理中间件</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err,req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.status(<span class="number">500</span>).send(err.message)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'running...'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="1-3-express中的router"><a href="#1-3-express中的router" class="headerlink" title="1.3 express中的router"></a>1.3 express中的router</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> public = <span class="built_in">require</span>(<span class="string">'./router/public'</span>)</span><br><span class="line"><span class="keyword">const</span> user = <span class="built_in">require</span>(<span class="string">'./router/user'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/public'</span>, public) <span class="comment">// 当请求以/public开头的路径时才会进来</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/user'</span>, user) <span class="comment">// 当请求以/uer开头的路径时才会进来</span></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>,() =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'running...'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// router</span></span><br><span class="line"><span class="comment">// 1.user.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/a'</span>, (req,res) =&gt; &#123;</span><br><span class="line">  res.send(<span class="string">'hello node'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.public.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/b'</span>, (req,res) =&gt; &#123;</span><br><span class="line">  res.send(<span class="string">'hello world'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure><ul><li><strong>app.router() 要挂载在所有第三方中间件的后面，因为前面配置的中间件是app.router()中请求处理函数的依赖</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-Express中路由和中间件&quot;&gt;&lt;a href=&quot;#1-Express中路由和中间件&quot; class=&quot;headerlink&quot; title=&quot;1. Express中路由和中间件&quot;&gt;&lt;/a&gt;1. Express中路由和中间件&lt;/h3&gt;&lt;h6 id=&quot;路由：就是如何
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>express中cookie和session的使用</title>
    <link href="http://yoursite.com/2020/01/13/express%E4%B8%ADcookie%E5%92%8Csession%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/01/13/express%E4%B8%ADcookie%E5%92%8Csession%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-01-13T08:00:19.952Z</published>
    <updated>2020-01-13T11:20:34.856Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Cookie-和-Session"><a href="#1-Cookie-和-Session" class="headerlink" title="1.Cookie 和 Session"></a>1.Cookie 和 Session</h3><p>​       会话管理：客户端和服务端通信过程中的数据是如何管理的</p><p>​       会话管理的技术：数据存在客户端  Cookie</p><p>​                                      数据存在服务端 Session</p><p>​       <strong>Cookie</strong>: http请求是无状态的。也就是说即使第一次和服务器连接后并且登录成功后，第二次请求服务器依然不能知道当前请求是哪个用户。cookie的出现就是为了解决这个问题，第一次登录后服务器返回一些数据（cookie）给浏览器，然后浏览器保存在本地，当该用户发送第二次请求的时候，就会自动的把上次请求存储的cookie数据自动的携带给服务器，服务器通过浏览器携带的数据就能判断当前用户是哪个了。cookie存储的数据量有限，不同的浏览器有不同的存储大小，但一般不超过4KB。因此使用cookie只能存储一些小量的数据</p><p>​     <strong>Session</strong>: session和cookie的作用有点类似，都是为了存储用户相关的信息。不同的是，cookie是存储在本地浏览器，而session存储在服务器。存储在服务器的数据会更加的安全，不容易被窃取。但存储在服务器也有一定的弊端，就是会占用服务器的资源</p><h5 id="1-1-express中使用cookie-parser中间件"><a href="#1-1-express中使用cookie-parser中间件" class="headerlink" title="1.1 express中使用cookie-parser中间件"></a>1.1 express中使用cookie-parser中间件</h5><p><img src="../image/cookie/%E5%9B%BE%E7%89%871.png" alt="cookie"></p><h6 id="1-1-1-安装：npm-install-cookie-parser-S"><a href="#1-1-1-安装：npm-install-cookie-parser-S" class="headerlink" title="1.1.1 安装：npm install cookie-parser -S"></a>1.1.1 安装：npm install cookie-parser -S</h6><h6 id="1-1-2-引包：const-cookieParser-require-‘cookie-parser’"><a href="#1-1-2-引包：const-cookieParser-require-‘cookie-parser’" class="headerlink" title="1.1.2 引包：const cookieParser = require(‘cookie-parser’)"></a>1.1.2 引包：const cookieParser = require(‘cookie-parser’)</h6><h6 id="1-1-3-配置cookie-parser中间件"><a href="#1-1-3-配置cookie-parser中间件" class="headerlink" title="1.1.3 配置cookie-parser中间件"></a>1.1.3 配置cookie-parser中间件</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>)</span><br><span class="line"></span><br><span class="line">app.use(cookieParser(<span class="string">'secret'</span>))</span><br></pre></td></tr></table></figure><h6 id="1-1-4在服务器通过res-cookie-方法创建一个cookie"><a href="#1-1-4在服务器通过res-cookie-方法创建一个cookie" class="headerlink" title="1.1.4在服务器通过res.cookie()方法创建一个cookie"></a>1.1.4在服务器通过res.cookie()方法创建一个cookie</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cookie的配置参数：</span><br><span class="line">maxAge  : 是cookie最大的有效时间 单位为毫秒</span><br><span class="line">expires ：是cookie的过期时间  是一个date对象</span><br><span class="line">httpOnly ： 当前cookie是否只能被web服务器获取</span><br><span class="line">singed:  是否对cookie进行签名(防止cookie被用户在浏览器修改)</span><br><span class="line">path：   是cookie的有效访问路径(如果没有设置，则默认为根路径)</span><br><span class="line">        比如我们设置了path:&quot;&#x2F;&quot; ，即意味着访问当前网站的任何接口都会携带cookie</span><br><span class="line">        比如我们设置了path:&quot;&#x2F;user&quot;，即意味着只有访问有&#x2F;user开头的接口才会在请求中携带cookie</span><br></pre></td></tr></table></figure><h6 id="1-1-5设置cookie的请求"><a href="#1-1-5设置cookie的请求" class="headerlink" title="1.1.5设置cookie的请求"></a>1.1.5设置cookie的请求</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">"/setCookie"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    res.cookie(<span class="string">"name"</span>,<span class="string">"cookiename"</span>,      &#123;<span class="attr">path</span>:<span class="string">"/user"</span>,<span class="attr">maxAge</span>:<span class="number">600000</span>,<span class="attr">httpOnly</span>:<span class="literal">true</span>,<span class="string">'signed'</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">    res.send(<span class="string">'setcookie'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="1-1-6-浏览器再次请求服务器的时候会将之前创建的cookie放在请求头中发送给服务器-服务器此时可以通过req-cookies来查看当前的cookie"><a href="#1-1-6-浏览器再次请求服务器的时候会将之前创建的cookie放在请求头中发送给服务器-服务器此时可以通过req-cookies来查看当前的cookie" class="headerlink" title="1.1.6 浏览器再次请求服务器的时候会将之前创建的cookie放在请求头中发送给服务器,服务器此时可以通过req.cookies来查看当前的cookie"></a>1.1.6 浏览器再次请求服务器的时候会将之前创建的cookie放在请求头中发送给服务器,服务器此时可以通过req.cookies来查看当前的cookie</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">"/getCookie"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="comment">//如果没有对cookie进行签名，则通过req.cookies来获取cookie</span></span><br><span class="line">    <span class="comment">//如果对cookie进行了签名，则通过req.signedCookies来获取cookie</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.cookies,req.signedCookies)  <span class="comment">// &#123;&#125; &#123;&#125;</span></span><br><span class="line">    res.send(<span class="string">'getcookie'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/user"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.cookies,req.signedCookies) <span class="comment">// &#123;&#125; &#123;name: 'cookiename'&#125;</span></span><br><span class="line">    res.send(<span class="string">'getcookie'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="1-1-7-Cookie记住用户名"><a href="#1-1-7-Cookie记住用户名" class="headerlink" title="1.1.7 Cookie记住用户名"></a>1.1.7 Cookie记住用户名</h6><p><img src="../image/cookie/%E5%9B%BE%E7%89%872.png" alt="cookie"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">const express &#x3D; require(&#39;express&#39;)</span><br><span class="line"></span><br><span class="line">const bodyParser &#x3D; require(&#39;body-parser&#39;)</span><br><span class="line"></span><br><span class="line">const cookieParser &#x3D; require(&#39;cookie-parser&#39;)</span><br><span class="line"></span><br><span class="line">const app &#x3D; express()</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line">app.engine(&#39;html&#39;, require(&#39;express-art-template&#39;))</span><br><span class="line">app.set(&#39;views&#39;, __dirname + &#39;&#x2F;views&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(cookieParser(&#39;xiaoxiong&#39;))</span><br><span class="line"></span><br><span class="line">app.get(&#39;&#x2F;login&#39;, (req,res) &#x3D;&gt; &#123;</span><br><span class="line">  if(req.signedCookies.name) &#123;</span><br><span class="line">    res.render(&#39;login.html&#39;,&#123;</span><br><span class="line">      name: req.signedCookies.name</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.render(&#39;login.html&#39;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&#39;&#x2F;usercenter&#39;, (req,res) &#x3D;&gt; &#123;</span><br><span class="line">  if(req.signedCookies.name) &#123;</span><br><span class="line">    res.render(&#39;usercenter.html&#39;,&#123;</span><br><span class="line">      name: req.signedCookies.name</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.render(&#39;usercenter.html&#39;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(&#39;&#x2F;login&#39;,(req,res) &#x3D;&gt; &#123;</span><br><span class="line">  let name &#x3D; req.body.name</span><br><span class="line">  let pwd &#x3D; req.body.pwd</span><br><span class="line">  let rmbname &#x3D; req.body.rmbname</span><br><span class="line">  &#x2F;&#x2F; console.log(name+&#39;---&#39;+pwd+&#39;---&#39;+&#39;---&#39;+rmbname)</span><br><span class="line">  if(rmbname &#x3D;&#x3D; &#39;on&#39;) &#123;</span><br><span class="line">    if(name &#x3D;&#x3D; &#39;朱艳&#39; &amp;&amp; pwd &#x3D;&#x3D; &#39;zhuyan&#39;) &#123;</span><br><span class="line">      res.cookie(&#39;name&#39;,name,&#123;</span><br><span class="line">        maxAge: 60000,</span><br><span class="line">        httpOnly: true,</span><br><span class="line">        &#39;signed&#39;: true</span><br><span class="line">      &#125;)</span><br><span class="line">      res.redirect(&#39;&#x2F;usercenter&#39;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      res.send(&#39;账号或者密码有误&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    if(name &#x3D;&#x3D; &#39;朱艳&#39; &amp;&amp; pwd &#x3D;&#x3D; &#39;zhuyan&#39;) &#123;</span><br><span class="line">      res.redirect(&#39;&#x2F;usercenter&#39;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      res.send(&#39;账号或者密码错误&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(3000, () &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;running..&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="2-1express中express-session中间件"><a href="#2-1express中express-session中间件" class="headerlink" title="2.1express中express-session中间件"></a>2.1express中express-session中间件</h5><p><img src="../image/cookie/%E5%9B%BE%E7%89%873.png" alt="session"></p><h6 id="2-1-1-安装：npm-install-express-session-S"><a href="#2-1-1-安装：npm-install-express-session-S" class="headerlink" title="2.1.1 安装：npm install express-session -S"></a>2.1.1 安装：npm install express-session -S</h6><h6 id="2-1-2-引包：const-expressSession-require-‘express-session’"><a href="#2-1-2-引包：const-expressSession-require-‘express-session’" class="headerlink" title="2.1.2 引包：const expressSession = require(‘express-session’)"></a>2.1.2 引包：<em>const</em> expressSession = require(‘express-session’)</h6><h6 id="2-1-3-配置中间件"><a href="#2-1-3-配置中间件" class="headerlink" title="2.1.3 配置中间件"></a>2.1.3 配置中间件</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">app.use(expressSession(&#123;</span><br><span class="line">  name : <span class="string">"cookieid"</span>,  <span class="comment">//指定所创建的session对应的cookie的名字</span></span><br><span class="line">  secret : <span class="string">'secret'</span>,  <span class="comment">//指定是否要签名这个cookie</span></span><br><span class="line">  <span class="comment">//resave: 强制保存 session 即使它并没有变化,。默认为 true。建议设置成 false。但是这个并不一定是必须的，如果客户端有两个并行的请求到你的服务端，</span></span><br><span class="line">  <span class="comment">// 一个请求对session的修改可能被另外一个请求覆盖掉，即使第二个请求并没有修改session</span></span><br><span class="line">  resave : <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// rolling:强制在每一个response中都发送session标识符的cookie。roling默认是false。如果把这个值设置为true但是  saveUnitialized设置为false,</span></span><br><span class="line">  <span class="comment">// 没有初始化的session的cookie不会被包含在响应中。主要作用：每次请求都重置cookie过期时间</span></span><br><span class="line">  rolling: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 强制没有“初始化”的session保存到storage(store:保存session的地方)中，</span></span><br><span class="line">  <span class="comment">// 没有初始化的session指的是刚被创建没有被修改。默认是true,但是不建议使用默认值</span></span><br><span class="line">  saveUninitialized: <span class="literal">false</span>, </span><br><span class="line">  cookie : &#123;</span><br><span class="line">      maxAge : <span class="number">1000</span> * <span class="number">60</span> * <span class="number">3</span>,   <span class="comment">//指定session对应的cookie的有效时间</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h6 id="2-1-4设置session"><a href="#2-1-4设置session" class="headerlink" title="2.1.4设置session"></a>2.1.4设置session</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.get(&#39;&#x2F;setsession&#39;, (req,res) &#x3D;&gt; &#123;</span><br><span class="line">  req.session.userinfo &#x3D; &#39;xiaoyang&#39;</span><br><span class="line">  res.send(&#39;setsession&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="2-1-5-得到session"><a href="#2-1-5-得到session" class="headerlink" title="2.1.5 得到session"></a>2.1.5 得到session</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/getsession'</span>, (req,res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.session)</span><br><span class="line">  res.send(req.session.userinfo)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="2-1-6-session登录案例"><a href="#2-1-6-session登录案例" class="headerlink" title="2.1.6 session登录案例"></a>2.1.6 session登录案例</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> expressSession = <span class="built_in">require</span>(<span class="string">'express-session'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line">app.engine(<span class="string">'html'</span>, <span class="built_in">require</span>(<span class="string">'express-art-template'</span>))</span><br><span class="line">app.set(<span class="string">'views'</span>, __dirname + <span class="string">'/views'</span>)</span><br><span class="line"></span><br><span class="line">app.use(expressSession(&#123;</span><br><span class="line">  name: <span class="string">"cookieid"</span>,  <span class="comment">//指定所创建的session对应的cookie的名字</span></span><br><span class="line">  secret: <span class="string">'secret'</span>,  <span class="comment">//指定是否要签名这个cookie</span></span><br><span class="line">  resave: <span class="literal">false</span>,</span><br><span class="line">  rolling: <span class="literal">true</span>,</span><br><span class="line">  saveUninitialized: <span class="literal">false</span>,</span><br><span class="line">  cookie: &#123;</span><br><span class="line">    maxAge: <span class="number">1000</span> * <span class="number">60</span> * <span class="number">3</span>,   <span class="comment">//指定session对应的cookie的有效时间</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/login'</span>, (req,res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> user = req.session.user</span><br><span class="line">  <span class="built_in">console</span>.log(user)</span><br><span class="line">  res.render(<span class="string">'login.html'</span>,user)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/login'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 获取请求参数信息</span></span><br><span class="line">  <span class="keyword">let</span> name = req.body.name</span><br><span class="line">  <span class="keyword">let</span> pwd = req.body.pwd</span><br><span class="line">  <span class="comment">// 如果用户登录成功 则把用户的信息存储到session中</span></span><br><span class="line">  <span class="keyword">if</span> (name == <span class="string">'sessionName'</span> &amp;&amp; pwd == <span class="string">'123'</span>) &#123;</span><br><span class="line">    <span class="comment">// 存储会话数据</span></span><br><span class="line">    req.session.user = req.body</span><br><span class="line">    <span class="comment">// 跳转到用户中心页面</span></span><br><span class="line">    res.redirect(<span class="string">'/usercenter'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.send(<span class="string">'账号或者密码错误'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/usercenter'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 从session中获取之前保存的数据</span></span><br><span class="line">  <span class="keyword">let</span> user = req.session.user</span><br><span class="line">  <span class="built_in">console</span>.log(user)</span><br><span class="line">  <span class="keyword">if</span> (user &amp;&amp; user.name) &#123;</span><br><span class="line">    res.render(<span class="string">'usercenter.html'</span>, &#123;</span><br><span class="line">      name: user.name</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.render(<span class="string">'usercenter.html'</span>, &#123;</span><br><span class="line">      name: <span class="string">'default'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 退出的登录</span></span><br><span class="line">app.get(<span class="string">'/layout'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 清空session</span></span><br><span class="line">  req.session.destroy()</span><br><span class="line">  res.redirect(<span class="string">'/home'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/home'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> user = req.session.user</span><br><span class="line">  <span class="keyword">if</span> (user &amp;&amp; user.name) &#123;</span><br><span class="line">    res.render(<span class="string">"home.html"</span>, &#123; <span class="attr">name</span>: user.name &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    res.render(<span class="string">"home.html"</span>, &#123; <span class="attr">name</span>: <span class="string">"default"</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'running...'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-Cookie-和-Session&quot;&gt;&lt;a href=&quot;#1-Cookie-和-Session&quot; class=&quot;headerlink&quot; title=&quot;1.Cookie 和 Session&quot;&gt;&lt;/a&gt;1.Cookie 和 Session&lt;/h3&gt;&lt;p&gt;​     
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/01/13/hello-world/"/>
    <id>http://yoursite.com/2020/01/13/hello-world/</id>
    <published>2020-01-13T06:57:33.480Z</published>
    <updated>2020-01-13T06:57:33.480Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
